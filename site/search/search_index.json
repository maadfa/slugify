{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Slugify \u2013  Documentation Edition","text":""},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Slugify \u2013  Documentation Edition</li> <li>Table of Contents</li> <li>Introduction</li> <li>How to  Install<ul> <li>Usage</li> </ul> </li> <li>Basic Usage</li> <li>Explanation</li> <li>Removing or replacing special characters (like !)</li> <li>Example of Customization</li> <li>Remove Characters</li> <li>Locales</li> <li>Extend</li> <li>Contribute</li> </ul>"},{"location":"#introduction","title":"Introduction","text":"<p>Slugify is a powerful tool that converts any string into a URL-friendly slug. This is particularly useful for web applications, blogs, and search engine optimization (SEO). For example, the string \"Hello World!\" would be transformed into \"hello-world\".</p>"},{"location":"#how-to-install","title":"How to  Install","text":"<p>There are few ways to install terminall .Open your terminal and run the following command</p> <p>It can be installed by using yarn .Enter the following command on your terminal</p> <pre><code>yarn add slugify\n</code></pre> <p>It can also be installed by using npm:</p> <pre><code>npm install slugify \n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#basic-usage","title":"Basic Usage","text":"<ol> <li>Import the Slugify Module</li> </ol> <pre><code>const slugify = require('slugify');\n</code></pre> <ol> <li>Convert a String into a Slug</li> </ol> <p><pre><code>  const slug = slugify('Hello World!');\n</code></pre>  3. Print the Result to the Console</p> <pre><code>  console.log(slug); // Output: hello-world\n</code></pre>"},{"location":"#explanation","title":"Explanation","text":"<p>The require('slugify') statement imports the Slugify module into your file, allowing you to use its functionality.</p> <p>The slugify('Hello World!') function call transforms the string into a slug by: Replacing spaces with dashes (-)</p> <p>Converting all letters to lowercase</p>"},{"location":"#removing-or-replacing-special-characters-like","title":"Removing or replacing special characters (like !)","text":"<p>Customizing Slugify You can customize the behavior of Slugify by passing an options object. Here\u2019s how:</p>"},{"location":"#example-of-customization","title":"Example of Customization","text":"<p>You can customize  or change the setting or  the behavior by passing an options object:</p> <p>slugify('Hello World!', {   replacement: '-',    // Replace spaces with this character (default: '-')   remove: /[*+~.()'\"!:@]/g, // Remove these characters (RegEx)   lower: true,         // Convert to lowercase (default: false)   strict: true,        // Remove anything not allowed in URLs (default: false)   locale: 'vi',        // Set locale (for language-specific transliteration)   trim: true           // Trim leading/trailing separators (default: true) });</p> <p>## Remove Characters   special characters Can be removed by  using the remove option.   slugify('Hello World!', {   remove: /[*+~.()'\"!:@]/g }); // Output: Hello-World</p> <p>For example, to remove <code>*+~.()'\"!:@</code> from the result slug, you can use <code>slugify('..', {remove: /[*+~.()'\"!:@]/g})</code>.</p> <ul> <li>If the value of <code>remove</code> is a regular expression, it should be a   character class   and only a character class. It should also use the   global flag.   (For example: <code>/[*+~.()'\"!:@]/g</code>.) Otherwise, the <code>remove</code> option might not   work as expected.</li> <li>If the value of <code>remove</code> is a string, it should be a single character.   Otherwise, the <code>remove</code> option might not work as expected.</li> </ul>"},{"location":"#locales","title":"Locales","text":"<p>When you convert a string to a slug, slugify replaces special or foreign characters (like \u00e9, \u00f6, or \u00f1) with their closest English equivalents.Slugify uses a file called charmap.json. This file contains a big list of characters and their English versions.Let\u2019s say charmap.json turns a letter into the wrong English letter for your language. For example, in Vietnamese or Turkish, some characters might have different meanings or sounds.You don\u2019t change charmap.json directly.Instead, you add a custom correction in another file called locales.json</p> <p>The main file called <code>charmap.json</code> has a list of all characters and how they should be changed into English letters. If you find a new character that isn't in this file, you should add it there first.</p> <p>If you come across a character that is already in <code>charmap.json</code>, but it doesn't translate correctly for your language, you can fix this by adding that character to another file called <code>locales.json</code>. This way, you can change how that character is translated, but only for your specific language. You can get the correct language code of your language from here.</p>"},{"location":"#extend","title":"Extend","text":"<p>Slugify comes with support for a limited set of Unicode symbols. If you want to add support for additional symbols or override existing ones, you can use the extend method.Out of the box <code>slugify</code> comes with support for a handful of Unicode symbols.</p> <pre><code>slugify('unicode \u2665 is \u2622') // unicode-love-is\n</code></pre> <p>However you can extend the supported symbols, or override the existing ones with your own:</p> <pre><code>slugify.extend({'\u2622': 'radioactive'})\nslugify('unicode \u2665 is \u2622') // unicode-love-is-radioactive\n</code></pre> <p>Keep in mind that the <code>extend</code> method extends/overrides the default <code>charMap</code> for the entire process. In case you need a fresh instance of the slugify's <code>charMap</code> object you have to clean up the module cache first:</p> <pre><code>delete require.cache[require.resolve('slugify')]\nvar slugify = require('slugify')\n</code></pre>"},{"location":"#contribute","title":"Contribute","text":"<p>If you want to contribute to Slugify, here are the steps you can follow:</p> <p>Add characters to charmap.json. Run tests using:</p> <pre><code>npm test\n</code></pre> <p>The tests will build the character map in index.js and sort the charmap.json. Commit all modified files</p> <p>Slugify is a versatile and easy-to-use tool for generating URL-friendly slugs from strings. With its customization options and support for various locales, it can be adapted to meet the needs of different projects. Whether you're a beginner or an experienced developer, Slugify can enhance your web applications and improve SEO.</p>"}]}